name: Manual deploy ahfow-www (new)

on:
  workflow_dispatch:
    inputs:
      deploy-environment:
        type: choice
        description: 'Deploy to environment:'
        required: true
        options:
        - development
        - production
      deploy-database:
        type: choice
        description: 'Deploy database?'
        required: true
        options:
        - true
        - false
jobs:
  deployment:
    runs-on: ubuntu-20.04
    environment:
      name: ${{ github.event.inputs.deploy-environment }}
      url: https://${{ vars.S3_BUCKET }}
    steps:
    - uses: actions/checkout@v3

    # Use GitHub Actions' cache to shorten build times and decrease load on servers
    - uses: actions/cache@v3
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.1 # Not needed with a .ruby-version file
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically

    # Standard usage
    - name: Build site
      run: |
        bundle exec jekyll build --config _config.yml,_config_${{ github.event.inputs.deploy-environment }}.yml

    # Example deployment: Push to S3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

#    - name: Create minified json for search
#      run: |
#        python3 -c 'import json, sys;json.dump(json.load(sys.stdin), sys.stdout)' < _deploy/search.json > _deploy/search-min.json

   - name: Sync output to S3 and delete removed content
      if: github.event.inputs.deploy-database == 'true'
      run: |
        aws s3 sync --size-only --delete --exclude '.sass-cache' _deploy s3://${{ vars.S3_BUCKET }}
        aws s3 mv --content-type "text/xml" --metadata-directive REPLACE s3://${{ vars.S3_BUCKET }}/feed.xml s3://${{ vars.S3_BUCKET }}/feed
        aws cloudfront create-invalidation --no-cli-pager --distribution-id ${{ secrets.FULLOFWISHES_WWW_DISTRIBUTION_ID }} --paths "/*"
        aws cloudfront create-invalidation --no-cli-pager --distribution-id ${{ secrets.FULLOFWISHES_CDN_DISTRIBUTION_ID }} --paths "/*"

   - name: Sync output to S3
      if: github.event.inputs.deploy-database == 'false'
      run: |
        aws s3 sync --size-only --exclude '.sass-cache' _deploy s3://${{ vars.S3_BUCKET }}
        aws s3 mv --content-type "text/xml" --metadata-directive REPLACE s3://${{ vars.S3_BUCKET }}/feed.xml s3://${{ vars.S3_BUCKET }}/feed
        aws cloudfront create-invalidation --no-cli-pager --distribution-id ${{ secrets.FULLOFWISHES_WWW_DISTRIBUTION_ID }} --paths "/*"
        aws cloudfront create-invalidation --no-cli-pager --distribution-id ${{ secrets.FULLOFWISHES_CDN_DISTRIBUTION_ID }} --paths "/*"

    - name: trigger database deployment
      if: github.event.inputs.deploy-database == 'true'
      uses: peter-evans/repository-dispatch@v2.1.1
      with:
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        repository: grange85/ahfow-database
        event-type: ahfow_www_push
        client-payload: '{"deploy_environment": "${{ github.event.inputs.deploy-environment }}","ahfow_www": "true"}'

