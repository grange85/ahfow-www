name: Deploy AHFoW to LIVE

on:
  push:
    branches:
    - main
  schedule:
    # Schedule to post every day
    - cron: '37 6,12,18 * * *'

jobs:
# =====================
# production deployment
# =====================
  prod-deployment:
    runs-on: ubuntu-20.04
    environment:
      name: production
      url: https://www.fullofwishes.co.uk
    steps:
    - uses: actions/checkout@v4

    # Use GitHub Actions' cache to shorten build times and decrease load on servers
    - uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3 # Not needed with a .ruby-version file
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically

    # Standard usage
    - name: Build site
      run: |
        JEKYLL_ENV=production bundle exec jekyll build --config _config.yml,_config_production.yml

    # Example deployment: Push to S3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create minified json for search
      run: |
        python3 -c 'import json, sys;json.dump(json.load(sys.stdin), sys.stdout)' < _deploy/search.json > _deploy/search-min.json

    - name: Sync output to S3 (complete)
      if: contains(github.event.head_commit.message, '[data]')
      run: |
        aws s3 sync --delete --exclude '.sass-cache' --exclude 'database/*' _deploy s3://${{ vars.S3_BUCKET }}
        aws s3 mv --content-type "text/xml" --metadata-directive REPLACE s3://${{ vars.S3_BUCKET }}/feed.xml s3://${{ vars.S3_BUCKET }}/feed

    - name: Sync output to S3
      if: "!contains(github.event.head_commit.message, '[data]')"
      run: |
        aws s3 sync --size-only --exclude '.sass-cache' _deploy s3://${{ vars.S3_BUCKET }}
        aws s3 mv --content-type "text/xml" --metadata-directive REPLACE s3://${{ vars.S3_BUCKET }}/feed.xml s3://${{ vars.S3_BUCKET }}/feed

    - name: Invalidate Cloudfront
      run: |
        aws cloudfront create-invalidation --no-cli-pager --distribution-id ${{ secrets.FULLOFWISHES_WWW_DISTRIBUTION_ID }} --paths "/*"
        aws cloudfront create-invalidation --no-cli-pager --distribution-id ${{ secrets.FULLOFWISHES_CDN_DISTRIBUTION_ID }} --paths "/*"
